const unsigned char font[] = {     // only first 20 bits belong to this character, rest is 1 for logica & (AND) operation
  B00010000, B00000000, B00001111, // _ underscore
  B00000000, B00000000, B00000000, // space  
  B01000000, B00000010, B00000000, // / division
  B00100000, B00000100, B00000000, // - dash  
  B00000000, B00000000, B00010000, // - dot
  B11100101, B00000111, B00000000, // * asterix
  B00000101, B00000000, B00010000, // ! exclamation mark
  B00000011, B00000010, B00110000, // ? question mark
  B00000000, B00000011, B00000000, // < less than
  B11000000, B00000000, B00000000, // > greater than
  B00010010, B00000000, B01100000, // [ bracket open
  B00010010, B01100000, B00000000, // ] bracket close 
  B00100010, B01100100, B01100000, //A
  B00110010, B01100100, B01100000, //B
  B00010010, B00000000, B01100000, //C
  B00010010, B01100000, B01100000, //D
  B00110010, B00000100, B01100000, //E
  B00100010, B00000000, B01100000, //F
  B00110010, B01000100, B01100000, //G
  B00100000, B01100100, B01100000, //H
  B00010111, B00000000, B00000000, //I
  B01000110, B00000000, B01000000, //J
  B00000101, B00000011, B00000000, //K
  B00010000, B00000000, B01100000, //L
  B10000000, B01100010, B01100000, //M
  B10000000, B01100001, B01100000, //N
  B00010010, B01100000, B01100000, //O
  B00100010, B00100100, B01100000, //P
  B00010010, B01100001, B01100000, //Q
  B00100010, B00100101, B01100000, //R
  B00110010, B01000100, B00100000, //S
  B00000111, B00000000, B00000000, //T
  B00010000, B01100000, B01100000, //U
  B10000000, B01100001, B00000000, //V
  B01000000, B01100001, B01100000, //W
  B11000000, B00000011, B00000000, //X
  B10000001, B00000010, B00000000, //Y
  B01010010, B00000010, B00000000, //Z
  B00010010, B01100000, B01100000, //O
  B00000000, B01100010, B00000000, //1
  B00110010, B00100100, B01000000, //2
  B00110010, B01100100, B00000000, //3
  B00100000, B01100100, B00100000, //4
  B00110010, B01000100, B00100000, //5
  B00110010, B01000100, B01100000, //6
  B00000010, B01100000, B00000000, //7
  B00110010, B01100100, B01100000, //8
  B00110010, B01100100, B00100000, //9
  B00000000, B00000000, B11110000, //% Special character to light all segments
};



byte SPKR[3] = { B00000000, B00000000, B10000000 }; //pos 1 
byte LOOP[3] = { B00000000, B00010000, B00000000 }; //pos 1
byte LOCK[3] = { B00000000, B10000000, B00000000 }; //pos 1
byte ARRW[3] = { B00000000, B00010000, B00000000 }; //pos 2
byte ASEL[3] = { B00000000, B10000000, B00000000 }; //pos 2
byte MENU[3] = { B00000000, B00000000, B10000000 }; //pos 7
byte THUN[3] = { B00000000, B00000000, B00100000 }; //pos 7
byte NOTE[3] = { B00000000, B00000000, B00010000 }; //pos 7
byte PLUS[3] = { B00100101, B01000000, B00000000 }; //pos 7
byte MINS[3] = { B00100000, B01000000, B00000000 }; //pos 7
byte SPLX[3] = { B00000000, B00000000, B00000000 }; //pos 7